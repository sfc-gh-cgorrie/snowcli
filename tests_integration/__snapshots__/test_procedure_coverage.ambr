# serializer version: 1
# name: test_procedure_coverage_flow[.gitignore]
  '''
  .packages/
  .venv/
  app.zip
  __pycache__
  
  '''
# ---
# name: test_procedure_coverage_flow[app.py]
  '''
  from __future__ import annotations
  
  import sys
  
  from snowflake.snowpark import Session
  
  
  def hello(session: Session) -> str:
      return "Hello World!"
  
  
  # For local debugging. Be aware you may need to type-convert arguments if
  # you add input parameters
  if __name__ == "__main__":
      from snowcli.config import cli_config
  
      session = Session.builder.configs(cli_config.get_connection("dev")).create()
      if len(sys.argv) > 1:
          print(hello(session, *sys.argv[1:]))  # type: ignore
      else:
          print(hello(session))  # type: ignore
      session.close()
  
  '''
# ---
# name: test_procedure_coverage_flow[config.toml]
  '''
  # Can create multiple --environments (default 'dev')
  
  [connections]
  [connections.dev]
  account = "<ACCOUNT_NAME>"
  database = "<DATABASE_NAME>"
  schema = "<SCHEMA_NAME>"
  warehouse = "<WAREHOUSE_NAME>"
  role = "<ROLE_NAME>"
  
  '''
# ---
# name: test_procedure_coverage_flow[local_connection.py]
  '''
  from __future__ import annotations
  
  import configparser
  from pathlib import Path
  
  import toml
  
  
  def get_dev_config(
      environment: str = "dev",
      app_config_path: Path = Path.cwd().joinpath("app.toml"),
  ) -> dict:
      try:
          app_config = toml.load(app_config_path)
          config = configparser.ConfigParser(inline_comment_prefixes="#")
          config.read(app_config["snowsql_config_path"])
          session_config = config["connections." + app_config["snowsql_connection_name"]]
          session_config_dict = {
              k.replace("name", ""): v.strip('"') for k, v in session_config.items()
          }
          session_config_dict.update(app_config.get(environment))  # type: ignore
          return session_config_dict
      except Exception:
          raise Exception(
              "Error creating snowpark_containers_cmds session - be sure you've logged into "
              "the SnowCLI and have a valid app.toml file",
          )
  
  '''
# ---
# name: test_procedure_coverage_flow[requirements.txt]
  '''
  snowflake-snowpark-python
  #snowcli  # for local development
  
  '''
# ---
